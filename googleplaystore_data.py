# -*- coding: utf-8 -*-
"""GooglePlaystore Data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ao83-39IBohuFqDLGrErPP6HYzncA9Tx
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

df=pd.read_csv('googleplaystore.csv')
df.head()

df.shape

df.info()

#summary of the dataset
df.describe()

# missing values
df.isnull().sum()

# insights and observations
# The data set has missing values
# Data Cleaning
df.head(2)

df['Reviews'].unique()

# for check if there is any int format use :df['Reviews'].astype(int)

df['Reviews'].str.isnumeric().sum()

df[~df['Reviews'].str.isnumeric()]

df_copy=df.copy()

df_copy=df_copy.drop(df_copy.index[10472])

df_copy[~df_copy['Reviews'].str.isnumeric()]

# convert the reviews Datatype into int
df_copy['Reviews']=df_copy['Reviews'].astype(int)

df_copy.info()

df_copy['Size'].unique()

df_copy['Size'].isnull().sum()

df_copy['Size']=df_copy['Size'].str.replace('M','000')
df_copy['Size']=df_copy['Size'].str.replace('k','')
df_copy['Size']=df_copy['Size'].replace('Varies with device',np.nan)
df_copy['Size']=df_copy['Size'].astype(float)

df_copy.info()

df_copy['Size']

df_copy['Installs'].unique()

df_copy['Price'].unique()

chars_to_remove=['+',',','$']
cols_to_clean=['Installs','Price']
for item in chars_to_remove:
  for cols in cols_to_clean:
    df_copy[cols]=df_copy[cols].str.replace(item,'')

df_copy['Installs'].unique()

df_copy['Price'].unique()

df_copy['Installs']=df_copy['Installs'].astype('int')

df_copy['Price']=df_copy["Price"].astype('float')

df_copy.info()

# Handling the last update feature
df_copy['Last Updated'].unique()

df_copy['Last Updated']=pd.to_datetime(df_copy['Last Updated'])
df_copy['Day']=df_copy['Last Updated'].dt.day
df_copy['Month']=df_copy['Last Updated'].dt.month
df_copy['Year']=df_copy['Last Updated'].dt.year

df_copy.head()

df_copy.info()

df_copy.to_csv('google_cleaned.csv')

# Exploratory Data Analysis

df_copy.head()

df_copy[df_copy.duplicated('App')]

df_copy[df_copy.duplicated('App')].shape

# Obeservation
# The data set has duplicate records

# Droping the duplicates
df_copy=df_copy.drop_duplicates(subset=['App'],keep='first')

df_copy.shape

# Explore Data

numeric_features = [feature for feature in df_copy.columns if df_copy[feature].dtype !='O']
categorical_features = [feature for feature in df_copy.columns if df_copy[feature].dtype =='O']

#print columns
print('We have {} numerical features : {}'.format(len(numeric_features),numeric_features))
print('\nWe have {} categorical features : {}'.format(len(categorical_features),categorical_features))

# Proportion of count data on categorical columns

for col in categorical_features:
  print(df[col].value_counts(normalize=True)*100)
  print('-----------------------')

# proportion of count data on numerical columns
plt.figure(figsize=(15,15))
plt.suptitle('Univariate Analysis of Numerical Features', fontsize=20, fontweight='bold', alpha=0.8, y=1.)

for i in range(0, len(numeric_features)):
  plt.subplot(5,3,i+1)
  sns.kdeplot(x=df_copy[numeric_features[i]],shade=True, color='r')
  plt.xlabel(numeric_features[i])
  plt.tight_layout()

# Observation
# Rating and year is left skewed while reviews, size, installs and price are right skewed

# categorical columns
plt.figure(figsize=(20,15))
plt.suptitle('Univariate Analysis of Categorical Features', fontsize=20, fontweight='bold',alpha=0.8, y=1.)
category=['Type','Content Rating']
for i in range(0, len(category)):
  plt.subplot(2,2,i+1)
  sns.countplot(x=df[category[i]],palette="Set2")
  plt.xlabel(category[i])
  plt.xticks(rotation=45)
  plt.tight_layout()

# which is the most popular app category?

df_copy.head(2)

df_copy['Category'].value_counts().plot.pie(y=df['Category'],figsize=(15,16
                                                                      ), autopct='%1.1f')

# Observations
# There are more kinds of apps in playstore which are under category of family, games and tools
# Beauty,comics,arts and weather kinds of apps are very less in playstore

# Top 10 app categories
category= pd.DataFrame(df['Category'].value_counts()) # DataFrame of apps on the basis of category
category.rename(columns={'Category':'Count'},inplace=True)

category

# Top 10 apps
plt.figure(figsize=(15,16))
sns.barplot(x=category.index[:10], y ='count',data=category[:10],palette='hls')
plt.title('Top 10 App Categories')
plt.xticks(rotation=90)
plt.show()

# insights
# family category has the most number of apps with 18% of apps belonging to it, followed by Games category which has 11% of the apps.
# Least number of apps belong to the Beauty Category with less than 1% of the total apps belonging to it.

# Which category has largest number of installations?
# what are teh top 5 most installed apps in each popular categories?
# How many apps are there on Google Play store which get 5 ratings?

df_cat_installs = df_copy.groupby(['Category'])['Installs'].sum().sort_values(ascending = False).reset_index()
df_cat_installs.Installs = df_cat_installs.Installs/1000000000# converting into billions
df2 = df_cat_installs.head(10)
plt.figure(figsize = (14,10))
sns.set_context("talk")
sns.set_style("darkgrid")

ax = sns.barplot(x = 'Installs' , y = 'Category' , data = df2 )
ax.set_xlabel('No. of Installations in Billions')
ax.set_ylabel('')
ax.set_title("Most Popular Categories in Play Store", size = 20)

dfa = df_copy.groupby(['Category' ,'App'])['Installs'].sum().reset_index()
dfa = dfa.sort_values('Installs', ascending = False)
apps = ['GAME', 'COMMUNICATION', 'PRODUCTIVITY', 'SOCIAL' ]
sns.set_context("poster")
sns.set_style("darkgrid")

plt.figure(figsize=(40,30))

for i,app in enumerate(apps):
    df2 = dfa[dfa.Category == app]
    df3 = df2.head(5)
    plt.subplot(4,2,i+1)
    sns.barplot(data= df3,x= 'Installs' ,y='App' )
    plt.xlabel('Installation in Millions')
    plt.ylabel('')
    plt.title(app,size = 20)

plt.tight_layout()
plt.subplots_adjust(hspace= .3)
plt.show()

rating = df_copy.groupby(['Category','Installs', 'App'])['Rating'].sum().sort_values(ascending = False).reset_index()

toprating_apps = rating[rating.Rating == 5.0]
print("Number of 5 rated apps",toprating_apps.shape[0])
toprating_apps.head(1)

# Results
# There are 271 five rated apps on google play store
# top most is "CT Brain Interpretation" from "Family" category

df_copy.head()